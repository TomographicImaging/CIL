# Copyright 2021 United Kingdom Research and Innovation
# Copyright 2021 The University of Manchester
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#     http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# Authors:
# CIL Developers, listed at: https://github.com/TomographicImaging/CIL/blob/master/NOTICE.txt
name: build
on:
  release:
    types: [published]
  push:
    branches: [master]
    tags: ['**']
    paths-ignore:
    - 'CHANGELOG.md'
    - 'CITATION.cff'
    - 'LICENSE'
    - 'scripts/**'
    - 'NOTICE.txt'
    - 'README.md'
  pull_request:
    branches: [master]
    paths-ignore:
    - 'CHANGELOG.md'
    - 'CITATION.cff'
    - 'LICENSE'
    - 'scripts/**'
    - 'NOTICE.txt'
    - 'README.md'
jobs:
  test-cuda:
    defaults: {run: {shell: 'bash -el {0}'}}
    runs-on: [self-hosted, python, cuda]
    strategy:
      matrix:
        python-version: [3.11]
        numpy-version: [1.25]
    steps:
    - uses: actions/checkout@v4
      with: {fetch-depth: 0, submodules: recursive}
    - id: reqs
      name: set requirements
      run: |
        envname="${GITHUB_REPOSITORY##*/}-${GITHUB_RUN_ID}.${GITHUB_RUN_NUMBER}"
        echo "envname=$envname" >> $GITHUB_OUTPUT
        sed -ri -e 's/^(name: ).*/\1$envname/' -e '/ python /d' -e 's/(.* numpy) .*/\1=${{ matrix.numpy-version }}/' scripts/requirements-test.yml
    - uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        environment-file: scripts/requirements-test.yml
        activate-environment: ${{ steps.reqs.outputs.envname }}
        run-post: false
    - id: build
      name: build
      run: |
        conda activate "${{ steps.reqs.outputs.envname }}"
        cmake -S . -B ./build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_BUILD=ON -DCMAKE_INSTALL_PREFIX="$CONDA_PREFIX"
        cmake --build ./build --target install
    - name: test
      run: |
        conda activate "${{ steps.reqs.outputs.envname }}"
        TESTS_FORCE_GPU=1 python -m unittest discover -v -k tigre -k TIGRE -k astra -k ASTRA -k gpu -k GPU ./Wrappers/Python/test
    - if: always()
      name: Post Run conda-incubator/setup-miniconda@v3
      shell: bash
      run: |
        sed -i '/${{ steps.reqs.outputs.envname }}/d' ~/.profile
        source ~/.profile
        conda env remove -n "${{ steps.reqs.outputs.envname }}"
  test:
    defaults: {run: {shell: 'bash -el {0}'}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
        - python-version: '3.10'
          numpy-version: 1.23
        - python-version: 3.12
          numpy-version: 1.26
    steps:
    - uses: actions/checkout@v4
      with: {fetch-depth: 0, submodules: recursive}
    - name: set requirements
      run: sed -ri -e '/ python /d' -e 's/(.* numpy) .*/\1=${{ matrix.numpy-version }}/' -e 's/=cuda*//' -e '/tigre/d' scripts/requirements-test.yml
    - uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        environment-file: scripts/requirements-test.yml
        activate-environment: cil_dev
    - name: build
      run: |
        cmake -S . -B ./build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_BUILD=ON -DCMAKE_INSTALL_PREFIX="$CONDA_PREFIX"
        cmake --build ./build --target install
    - name: test
      run: python -m unittest discover -v ./Wrappers/Python/test
  conda:
    defaults: {run: {shell: 'bash -el {0}'}}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
        numpy-version: [1.25]
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha || github.ref }} # fix SHA
    - uses: conda-incubator/setup-miniconda@v3
      with:
        python-version: ${{ matrix.python-version }}
        mamba-version: "*"
        channels: conda-forge
    - name: conda build & test
      working-directory: recipe
      run: |
        conda install boa
        conda mambabuild . -c conda-forge -c intel -c ccpi --python=${{ matrix.python-version }} --numpy=${{ matrix.numpy-version }} --output-folder .
    - name: Upload artifact of the conda package
      uses: actions/upload-artifact@v4
      with:
        name: cil-package
        path: recipe/linux-64/cil*
  docs:
    defaults: {run: {shell: 'bash -el {0}'}}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha || github.ref }} # fix SHA
    - uses: conda-incubator/setup-miniconda@v3
      with: {python-version: 3.11}
    - name: install dependencies
      run: |
        cd docs
        conda install -c conda-forge -yq conda-merge
        conda-merge ../scripts/requirements-test.yml docs_environment.yml > environment.yml
        conda env update -n test
        conda list
    - name: build cil
      run: |
        cmake -S . -B ./build -DCMAKE_BUILD_TYPE=RelWithDebInfo -DCONDA_BUILD=ON -DCMAKE_INSTALL_PREFIX="$CONDA_PREFIX"
        cmake --build ./build --target install
    - name: checkout docs
      uses: actions/checkout@v4
      with:
        path: docs/build
        ref: gh-pages
    - name: update docs
      run: |
        cd docs
        docs_dir="${{ github.ref_name }}"
        docs_dir="${docs_dir//\//_}"
        if test "$docs_dir" = master; then docs_dir=nightly; fi
        rm -rf "build/$docs_dir"
        ./mkdemos.py
        sphinx-build -b dirhtml source "build/$docs_dir"
        sed 's#DESTINATION#nightly#g' .redirect-template.html > build/index.html
        ./mkversions.py
    - uses: actions/upload-artifact@v4
      with:
        name: DocumentationHTML
        path: docs/build
    - name: Push changes
      if: github.ref == 'refs/heads/master'
      uses: casperdcl/push-dir@v1
      with:
        message: Update documentation
        branch: gh-pages
        dir: docs/build
        nojekyll: true
  docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        submodules: recursive
        ref: ${{ github.event.pull_request.head.sha || github.ref }} # fix SHA
    - uses: jlumbroso/free-disk-space@v1.3.1
      with:
        docker-images: false
        large-packages: false
    - uses: docker/setup-buildx-action@v3
    - uses: docker/metadata-action@v5
      id: meta
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
        labels: |
          org.opencontainers.image.licenses=Apache-2.0 AND BSD-3-Clause AND GPL-3.0
    - uses: docker/login-action@v3
      if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags')
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - uses: docker/build-push-action@v5
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: .
        load: true
        tags: tomographicimaging/cil:test
    - name: test
      run: >
        docker run --rm -v .:/CIL tomographicimaging/cil:test /bin/bash -c
        'python -m unittest discover -v /CIL/Wrappers/Python/test'
    - uses: docker/build-push-action@v5
      with:
        cache-from: type=gha
        cache-to: type=gha,mode=max
        context: .
        push: ${{ github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
  pass:
    needs: [test-cuda, test, conda, docs, docker]
    runs-on: ubuntu-latest
    steps: [{run: echo success}]
